# Template for API CI/CD Pipeline

name: API CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
  repository_dispatch:
    types: [core-updated]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run linting
        run: npm run lint
        
      - name: Run tests
        run: npm test
        
      - name: Upload test coverage
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: coverage/
          
  build:
    needs: test
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: spectra/api:${{ github.sha }},spectra/api:latest
          cache-from: type=registry,ref=spectra/api:latest
          cache-to: type=inline
          
      - name: Notify infrastructure repository
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.REPO_ACCESS_TOKEN }}
          repository: Vesryin/spectra-infra
          event-type: api-image-updated
          client-payload: '{"image": "spectra/api", "tag": "${{ github.sha }}"}'
          
  deploy-staging:
    needs: build
    if: github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          repository: Vesryin/spectra-infra
          token: ${{ secrets.REPO_ACCESS_TOKEN }}
          
      - name: Update Kubernetes manifests
        run: |
          cd kubernetes
          sed -i 's|image: spectra/api:.*|image: spectra/api:${{ github.sha }}|' deployment.yaml
          
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2
          
      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name spectra-staging --region us-west-2
        
      - name: Deploy to staging
        run: |
          kubectl apply -f kubernetes/configmap.yaml -n spectra-staging
          kubectl apply -f kubernetes/deployment.yaml -n spectra-staging
          kubectl apply -f kubernetes/service.yaml -n spectra-staging
          kubectl apply -f kubernetes/ingress.yaml -n spectra-staging
          
      - name: Verify deployment
        run: |
          kubectl rollout status deployment/spectra-api -n spectra-staging
          
  deploy-production:
    needs: build
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v3
        with:
          repository: Vesryin/spectra-infra
          token: ${{ secrets.REPO_ACCESS_TOKEN }}
          
      - name: Update Kubernetes manifests
        run: |
          cd kubernetes
          sed -i 's|image: spectra/api:.*|image: spectra/api:${{ github.sha }}|' deployment.yaml
          
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2
          
      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name spectra-production --region us-west-2
        
      - name: Deploy to production
        run: |
          kubectl apply -f kubernetes/configmap.yaml -n spectra-production
          kubectl apply -f kubernetes/deployment.yaml -n spectra-production
          kubectl apply -f kubernetes/service.yaml -n spectra-production
          kubectl apply -f kubernetes/ingress.yaml -n spectra-production
          
      - name: Verify deployment
        run: |
          kubectl rollout status deployment/spectra-api -n spectra-production
